range(1, 10)
range(10)
list(range(10))
[1:4]
1:4
sqrt(4)
2**2
g =4
g+=1
g = g +1
g
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(-1, 1)
y = runif(-1, 1)
if(sqrt(x**2 + y**2) > 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) > 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = inside_tot / outside_tot
pi
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) > 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = inside_tot / outside_tot
pi
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) > 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = inside_tot / outside_tot
pi
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) >= 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = inside_tot / outside_tot
pi
# Your code goes here.
x = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in x) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) >= 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / outside_tot
pi
# Your code goes here.
n = 1:1000000
inside_tot = 0
outside_tot = 0
for(i in n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) >= 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
as.integer(n)
# Your code goes here.
n = 1000000
inside_tot = 0
outside_tot = 0
for(i in 1:1000000) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) >= 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
# Your code goes here.
n = 1000000
inside_tot = 0
outside_tot = 0
for(i in 1:1000000) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) > 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
# Your code goes here.
n = 1000000
inside_tot = 0
outside_tot = 0
for(i in 1:1000000) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) >= 1) {
outside_tot = outside_tot + 1
}
else{
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
g = 10
1:g
f = runif(4, -1, 1)
f
f = 10
d = 3
f = [1,2,3,4,4,5]
f = 1:10
s = 9:30
fj = [f > g]
fg = f>g
fg
sum(fg)
n = 1000000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = sum(inside_pt)
pie
n = 1000000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
n = 1000000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
n = 1000000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
n = 1000001
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
x = [1,2,3,4]
x = 1,2,3,4
x = c(1,2,3,3)
x
x[4]
n = 100000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
n = 100000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
install.packages("microbenchmark")
# How long does it take to sample 100 observations from standard normal
# distribution?
microbenchmark(rnorm(100))
library(microbenchmark)
# How long does it take to sample 100 observations from standard normal
# distribution?
microbenchmark(rnorm(100))
# Your code goes here.
benchmark {
# Your code goes here.
benchmark({
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
}
{
# Your code goes here.
benchmark({
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
},
{
n = 10000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
}
})
# Your code goes here.
benchmark(
{
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
},
{
n = 10000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
})
# Is it slower to sample 100 strings than it is to sample 100 integers?
microbenchmark(
{ # Case 1
options = c("a", "b", "c")
sample(options, 100, replace = TRUE)
},
{ # Case 2
options = 1:3
sample(options, 100, replace = TRUE)
}
)
# Your code goes here.
microbenchmark(
{
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
},
{
n = 10000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
})
# Your code goes here.
microbenchmark(
{
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
},
{
n = 10000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
})
# Your code goes here.
benchmark = microbenchmark(
{
n = 10000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
},
{
n = 10000
x = runif(n, -1, 1)
y = runif(n, -1, 1)
inside_pt = sqrt(x**2 + y**2) < 1
pie = 4 * sum(inside_pt) / n
pie
})
benchmark
44315.812	 - 1459.752
32812.582	 - 519.369
44315.812 / 1459.752
# Your code goes here.
n = 1000000
inside_tot = 0
for(i in 1:n) {
x = runif(1, -1, 1)
y = runif(1, -1, 1)
if(sqrt(x**2 + y**2) < 1) {
inside_tot = inside_tot + 1
}
}
pi = 4 * inside_tot / n
pi
