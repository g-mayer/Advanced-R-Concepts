sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
profile(sample_markov())
profile(sample_markov(), n=10)
profile(sample_markov(n = 20))
install.packages("profvis")
profile(sample_markov(n = 20))
profvis::profvis(sample_markov(n=19))
profvis::profvis(sample_markov(n=1000))
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=1000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=50000)
})
sample_markov(n=50)
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain = factor()
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=50000)
})
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain = factor(chain)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=50000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=50000)
})
x = vector(mode="list", length=3)
x
x[1] =2
x
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- vector(mode = "list", length = n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=50000)
})
list(length=10)
x = list(length=19)
x
x = vector(length=19)
x
x[1] = 'a'
a
x
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- vector(length = n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=50000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=15000)
})
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- vector(length = n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=15000)
})
x = character(10)
xz
x
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- character(length = n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=15000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- character(length = n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your edited function and the code to profile it go here:
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
chain <- character(n)
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code goes here.
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = 0) {
chain = init
for (i in 1:n) {
chain <- numeric(n)
# Check the previous state, chain[i].
if (chain[i] == 0) {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c(0, 1), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c(0, 1), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code goes here.
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = 0) {
chain = init
chain = numeric(n)
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == 0) {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c(0, 1), 1, prob = prob)
chain[i] = x
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c(0, 1), 1, prob = prob)
chain[i] = x
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code to profile the original function goes here:
library(profvis)
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = "A") {
chain = init
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == "A") {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
} else {
# Get the probabilities for {B to A} and {B to B}.
prob = c(1 - p[2], p[2])
# Randomly sample new state using the probabilities.
x = sample(c("A", "B"), 1, prob = prob)
chain = c(chain, x)
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code goes here.
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = 0) {
chain = init
chain = numeric(n)
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == 0) {
chain[i] = rbinom(n=1,size=1)
} else {
chain[i] = rbinom(n=1,size=1)
}
}
chain[-1]
}
sample_markov(n=35000)
})
# Your code goes here.
profvis({
sample_markov = function(n, p = c(0.6, 0.7), init = 0) {
chain = init
chain = numeric(n)
for (i in 1:n) {
# Check the previous state, chain[i].
if (chain[i] == 0) {
# Get the probabilities for {A to A} and {A to B}.
prob = c(1 - p[1], p[1])
# Randomly sample new state using the probabilities.
x =
chain[i] = rbinom(n=1, size=1, prob = p[1])
} else {
chain[i] = rbinom(n=1, size=1, prob = p[2])
}
}
chain[-1]
}
sample_markov(n=35000)
})
