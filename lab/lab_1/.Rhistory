berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
is.na(berk)
sum(is.na(berk))
berk <- na.omit(berk)
sum(is.na(berk))
berk <- subset(ba_data, ba_data$city == 'Berkeley', na.rm = TRUE)
berk <- na.omit(berk)
sum(is.na(berk))
cheap_berk <- order(berk$price)
berk[cheap_berk]
berk[1]
berk[1]
berk[cheap_berk]
berk <- subset(ba_data, ba_data$city == 'Berkeley', na.rm = TRUE)
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk]
cheap_berk
berk[27]
is.na(berk[27])
str(berk)
berk[cheap_berk,
berk <- subset(ba_data, ba_data$city == 'Berkeley', na.rm = TRUE)
berk <- na.omit(berk)
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk,]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
berk[,cheap_berk]
berk[cheap_berk,]
berk[27,]
berk
berk[3147]
berk[3147,]
berk[3147,berk]
berk[3147,]
berk$price == 175
berk[which(berk$price == berk$price[cheap_berk]), ]
berk[which(berk$price == berk$price[cheap_berk]) ]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk]
berk[cheap_berk,]
berk[which(berk$price == berk$price[cheap_berk]) ]
berk[berk$price == 175]
print(berk[berk$price == 175])
berk[1]
head(berk)
berk[5]
head(berk)
summary(berk)
as.numeric(rownames(berk))
berk[5]
berk[]
berk[as.numeric(rownames(berk)) ==5]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk]
berk[cheap_berk,]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
cheap_berk <- order(berk)
cheap_berk <- cheap_berk[0:5]
berk[cheap_berk,]
berk[cheap_berk,]
berk <- subset(ba_data, ba_data$city == 'Berkeley')
cheap_berk <- order(berk)
cheap_berk <- cheap_berk[0:5]
print(berk$price[cheap_berk[0]])
print(berk$price[cheap_berk[0]])
print(berk$price[cheap_berk])
print(berk$price[27])
print(berk$price[75])
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
print(berk$price[75])
print(berk$price[27])
berk <- subset(ba_data, ba_data$city == 'Berkeley')
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
print(berk$price[27])
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
print(berk$price[27])
for i in range(0:5):
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
for (i in range(0:5)){
print(berk$price[cheap_berk[i]])
print(berk$bedrooms[cheap_berk[i]])
print(berk$title[cheap_berk[i]])
}
r <- range(0:5)
r
r <- range(0:5, 1)
r
berk <- subset(ba_data, ba_data$city == 'Berkeley')
berk <- na.omit(berk)
cheap_berk <- order(berk$price)
cheap_berk <- cheap_berk[0:5]
r <- c(0,1,2,3,4)
for (i in r){
print(berk$price[cheap_berk[i]])
print(berk$bedrooms[cheap_berk[i]])
print(berk$title[cheap_berk[i]])
}
load("family.rda")
plot(berk$price ~ berk$bathrooms, data = berk)
lm(berk$price ~ berk$bathrooms, data = berk)
plot(berk$price ~ berk$bedrooms, data = berk)
berk[1,]
sum(berk[1,])
length(berk[1,])
length(berk)
length(berk[,1])
vars(berk)
str(berk)
dim(berk)
len(berk[1,])
length(berk[1,])
berk[1,1]
berk[1,2]
berk[1,3]
berk[1,4]
berk[1,5]
berk[1,6]
berk[1,7]
berk[1,8]
berk[1,9]
berk[1,0]
berk[1,10]
name(berk[,10])
names(berk)
names(berk[10])
names(berk[8])
barchart(berk$price ~ berk$bathrooms, data = berk)
boxplot(berk$price ~ berk$bathrooms, data = berk)
barplot(berk$price ~ berk$bathrooms, data = berk)
hist(berk$price ~ berk$bathrooms, data = berk)
type(berk)
class(berk)
type(berk$price)
class(berk$price)
class(berk$bathrooms)
hist(x=berk$price, y= berk$bathrooms, data = berk)
hist(berk$bathrooms)
hist(berk$price)
hist(berk$price, xlim = 7000)
hist(berk$price, xlim = 7000, ylim = 1000)
hist(berk$price, xlim = "7000"", ylim = "1000")
hist(berk$price, xlim = c(0, 7000))
hist(berk$price, xlim = c(0, 7000), ylim = c(0, 135)
)
hist(berk$price, breaks = 30, xlim = c(0, 7000), ylim = c(0, 135))
hist(berk$price, breaks = 100, xlim = c(0, 7000), ylim = c(0, 135))
hist(berk$price, breaks = 100, xlim = c(0, 7000), ylim = c(0, 60))
hist(berk$price, breaks = 100, xlim = c(1000, 5000), ylim = c(0, 60))
hist(berk$price, breaks = 100, xlim = c(1000, 5000), ylim = c(0, 20))
library(ggplot2)
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_point(aes(x = "Price", y = "Frequency", colors = price > 3000))
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_hist(aes(x = "Price", y = "Frequency", colors = price > 3000))
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_hist(aes(x = "Price", y = "Frequency", colors = berk$price > 3000))
geom_hist(aes(x = "Price", y = "Frequency", colors = berk$price))
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_hist(aes(x = "Price", y = "Frequency", colors = berk$price))
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_histogram(aes(x = "Price", y = "Frequency", colors = berk$price))
ggplot(berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_histogram()
ggplot(data=berk$price, xlim = c(1000, 5000), ylim = c(0, 30))+
geom_histogram()
ggplot(data=berk$price)+
geom_histogram()
ggplot(berk)+
geom_histogram()
ggplot(berk)+
geom_histogram(x = berk$price)
ggplot(berk, x = berk$price)+
geom_histogram(aes(x = "price"))
ggplot(berk, x = berk$price), state="count+
ggplot(berk, x = berk$price), state="count)+
ggplot(berk, x = berk$price), state="count")+
ggplot(berk, x = berk$price, state="count")+
geom_histogram(aes(x = "price"))
dogs = readRDS("data/dogs/dogs_full.rds")
setwd(/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds)
dogs = readRDS("data/dogs/dogs_full.rds")
setwd(Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds)
setwd(g-mayer/adv_r/lab/lab_1/dogs_full.rds)
getwd
wd()
getwd()
setwd("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
setwd("/Users/g-mayer/adv_r/lab/lab_1")
dogs = readRDS("data/dogs/dogs_full.rds")
ls
getwd()
setwd("/Users/g-mayer/adv_r/lab/lab_1")
setwd("/Users/g-mayer/adv_r/lab/lab_1")
setwd("/Users/g-mayer/adv_r/lab/lab_1")
dogs = readRDS("data/dogs/dogs_full.rds")
dogs = readRDS("dogs_full.rds")
dogs = readRDS("/dogs_full.rds")
readRDS("dogs_full.rds")
dogs = readRDS("dogs_full.rds")
dogs = readRDS("dogs_full.rds")
head(dogs)
x = c(7, -3, 1)
x[1]
x[[1]]
type(x[[1]])
class(x[[1]])
class(x[1])
x[c(1, 2, 2)]
x[[c(1, 2, 2)]]
x[-2]
x[[-1]] # can't return multiple elements
x
y = c(a = 7, b = -5, c = 1)
y
y["a"]
x["a"] # no element named "a"
y[["b"]]
x["a"] # no element named "a"
y[["b"]]
x[["b"]] # error
x["a"] # no element named "a"
x[7]
x[[7]]
x[[1]]
y[[1]]
y[[2]]
y[[3]]
y[c("a", "b", "a")]
y > 0
which(y > 0)
y > 0
which(y > 0)
y[which(y > 0)] # subsetting by position
which(y > 0)
y[which(y > 0)] # subsetting by position
y[y > 0]
# One case where this breaks:
y_withNA = c(7, -1, NA)
y_withNA > 0
y_withNA[y_withNA > 0]
y_withNA[which(y_withNA > 0)] # drops the NAs
y_withNA[y_withNA > 0]
y_withNA > 0
# One case where this breaks:
y_withNA = c(7, -1, NA)
y_withNA > 0
y_withNA[which(y_withNA > 0)] # drops the NAs
x[[c(FALSE, FALSE, TRUE)]]
# If length of logical doesn't match, R recycles:
x
# FALSE TRUE FALSE TRUE FALSE TRUE ...
x[c(FALSE, TRUE)]
# If length of logical doesn't match, R recycles:
x
# FALSE TRUE FALSE TRUE FALSE TRUE ...
x[c(FALSE, TRUE)]
x = list(a = c(6, 5), b = "hi")
x
class(x[1])
class(x[[1]])
x
x[1]
x[[1]]
x[[c(2, 2)]]
x[[2]]
x[[c(2, 2)]]
x[[2]]
x[[c(2, 2)]]
x[[2]]
x[[c(1, 2)]] # recursive subsetting: 1st element's 2nd element
x = list(a = c(6, 5), b = "hi")
x[1]
x[a]
x["a"]
x["a"][0]
x[["a"]]
x[["a"]][]
x[["a"]][1]
x[["a"]][2]
x["a"][2]
x["a"][1]
x[1]
x[[1]]
class(x[1])
class(x[[1]])
class(x[1])
x[c(1, 1, 2)]
x[1][1][1][1] # keeps the container
x[c(1, 1, 2)]
x[[1]]
x[[1]][[2]] # equivalent to above line
x["a"][1]
x[[2]]
class(x[[2]])
class(x[2])
head(dogs)
dogs[1, 1] # drops the container
dogs[1,1]
# Notice that the dogs data frame is a tibble.
#
# In recent versions of the tibble package, using `[` to subset a single value
# DOES NOT drop the data frame.
#
# So you may see different behavior above if you have a recent version of the
# tibble package.
#
# If you want to see the behavior for ordinary data frames, try subsetting a
# non-tibble data frame, such as R's built-in `iris` data frame:
iris[1, 1]
head(iris)
head(d0gs)
head(dogs)
dogs[1,1]
dogs[1,1, drop = TRUE]
dogs[[1,1]]
dogs[[1,1:2]]
dogs[[1,1:6]]
dogs[[1,1:4]]
dogs[[1,1:2]]
dogs[1, 1:5]
dogs[1, ] # first row, all columns
x[["a"]]
x$"a"
x$"+A"
dogs$bree
su = subset(dogs, weight > mean(weight, na.rm = TRUE))
head(su)
mean(su$lifetime_cost)
mean(su$lifetime_cost, na.rm=TRUE)
max(su$lifetime_cost, na.rm=TRUE)
min(su$lifetime_cost, na.rm=TRUE)
install.packages("ggplot2")
update.packages(ggplot2)
library(ggplot2)
update.packages(ggplot2)
update.packages(tibble)
ggplot(dogs)
ggplot(dogs) + geom_point()
library(ggplot2)
ggplot(dogs)
ggplot(dogs) + geom_point()
ggplot(dogs, aes(x = datadog, y = popularity)) + geom_point()
# Alternative syntax:
ggplot(dogs) + geom_point(aes(x = datadog, y = popularity))
ggplot(dogs, aes(x = datadog, y = popularity)) + geom_point()
ggsave("myplot.png")
install.packages("tidyr")
install.packages("tidyr")
dogs = readRDS("data/dogs/dogs_full.rds")
getwd
getwd()
dogs = readRDS("dogs_full.rds")
head(dogs)
dogs = readRDS("dogs_full.rds")
dogs = readRDS("/dogs_full.rds")
dogs = readRDS("~/dogs_full.rds")
getwd()
getwd()
dogs = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
dogs = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
dogs = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
hi = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
head(hi)
dogs = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
dogs[ , "datadog"]
dogs[["datadog"]]
# Aesthetic layer applies to every geometry layer:
ggplot(dogs, aes(x = datadog, y = popularity)) + geom_point()
library(ggplot2)
# Aesthetic layer applies to every geometry layer:
ggplot(dogs, aes(x = datadog, y = popularity)) + geom_point()
# Alternate syntax:
# Aesthetic layer only applies to geom_point:
ggplot(dogs) + geom_point(aes(x = datadog, y = popularity))
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point() +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05)
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point() +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "top", nudge_x = 0.05)
bottom
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point() +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05)
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point() +
geom_text(aes(label = breed), size = 3, hjust = "left",
vjust = "bottom", nudge_x = 0.05)
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point() +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05)
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point(aes(color = group)) +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05)
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point(color = "purple")
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point(aes(color = group)) +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05) +
scale_y_reverse()
ggplot(dogs, aes(x = datadog, y = popularity))  +
geom_point(aes(color = group)) +
geom_text(aes(label = breed), size = 2, hjust = "left",
vjust = "bottom", nudge_x = 0.05) +
scale_y_reverse() +
labs(title = "Best in Show", x = "Datadog", y = "Popularity")
# Load the package:
library(tidyr)
# Included with tidyr:
table1
# Included with tidyr:
table2
pivot_wider(table2, names_from = type, values_from = count)
# Step 1
cases = table2[table2$type == "cases", ]
pop = table2[table2$type == "population", ]
pop
# Step 3
names(pop)[3] = "population"
names(cases)[3] = "cases"
pop
cases
pop
# Risky way to do step 4:
cbind(pop, cases)
c(1,2,3) + c(1,2,3,4)
c(1,2,3) + c(1,2,3)
c(1,2,3) + c(1,2,3,1)
c(1,2,3) + c(1,2,3,2)
c(1,2,3) + c(1,2,3,3)
c(1,2,3) + c(1,2,3,4)
c(1,2,3) + c(1,2,3,5)
c(1,2,3,4) + c(1,2,3)
c(1,2,3,1) + c(1,2,3)
class(c('x', "y"))
class(c('x', "y", 2))
class(c('x', "y", 2, TRUE))
class(c(1,'x', "y", 2, TRUE))
class(c(1,'x', cos, 2, TRUE))
class(c(1,'x', ggplot, 2, TRUE))
class(c(1,'x', NULL, 2, TRUE))
class(c(1,0, NULL, 2, TRUE))
sum(c(1,2,3,4))
sum(c(1,2,3,4), c(293))
log(c(1,2,3,4))
sin(c(1,2,3,4))
+c(1,2,3,3)
1+c(1,2,3,4)
c(1, 2, 3) + c(4, 5, 6, 7)
mean(c(1, 2, 3, 4))
data.fram(price = c(100,200, 100), obj = c("cranyon", "avo", "cranyon"))
f = data.frame(price = c(100,200, 100), obj = c("cranyon", "avo", "cranyon"))
f
frequency(f, obj = "cranyon")
frequency(f, obj == "cranyon")
frequency(obj)
frequency(f$obj)
frequency(f, obj)
cbind(f, c(1,2,3,4))
cbind(f, c(1,2,3))
f
typeof(f$price)
?frequency
frequency(f)
frequency(f, type = '100')
cycle(f)
time(f)
time(f$price == 100)
frequency(f$price==100)
frequency(f$price==200)
frequency(f$price==0)
,amns;kdf
rnorm(8)
rnorm(3)
rnorm("3.1")
c(T, F, 4)
typeof(lm)
