x = 5
if (x<5) message("x is less than 5!") else message("this is the else" )
# White space doesn't matter in R, so one liner ifs can be on one line or however we want
x = 5
if (x<5) message("x is less than 5!")
else message("this is the else" )
x = 5
if (x<5) message("x is less than 5!")
else message("this is the else" )
x = 5
if(x<5) { message("x is less than 5!")
} else { message("this is the else" )}
# White space doesn't matter in R, so one liner ifs can be on one line or however we want
if(x<5) { message("x is less than 5!") } else { message("this is the else" )}
# You have to have the brackets around if and else in exactly the same way
x = 5
if(x<5) { message("x is less than 5!") }
else { message("this is the else" )}
#
x = 1,2,3
#
x = c(1,2,3)
if (x<2) {
message("x<2")
}
#
x = c(1,2,3)
if (x<2) {
message("x<2")
}
ifelse(x<2) {
ifelse(x < 2, x, 10)
x
x = 2
switch(x,
message("x is 1")
message("x is 2")
x = 2
switch(x,
message("x is 1"),
message("x is 2")
)
# Only strings and integers work in this, integers work based off of position
x = 2
switch(x,
message("x is 1"),
message("x is 3")
)
mycases[[x]]
mycases  = list(1, 30)
mycases[[x]]
# if you use a string as if it were an integer it will throw an error unless there is only one case
x = "hi"
switch(x,
message("x is 1"),
message("x is 2")
)
sin(c(1, 2, 3))
#lapply function
mydata = list(1:3, seq(10, 20, 0.5), rnorm(10))
lapply(mydata, mean)
mydata
as.table(mydata)
as.data.frame(mydata)
dogs = readRDS(file = dogs)
dino = readRDS("/Users/g-mayer/adv_r/homework/DatasaurusDozen.tsv")
dino = readRDS("/Users/g-mayer/adv_r/homework/DatasaurusDozen.tsv")
dino = read.TSV("/Users/g-mayer/adv_r/homework/DatasaurusDozen.tsv")
dino = read("/Users/g-mayer/adv_r/homework/DatasaurusDozen.tsv")
dino = read.csv("/Users/g-mayer/adv_r/homework/DatasaurusDozen.tsv")
# lapply keeps the names of the input
lapply(dino, class)
# lapply keeps the names of the input
lapply(dino, class)
# lapply keeps the names of the input
lapply(dino, class)
dino = read.csv("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
# lapply keeps the names of the input
lapply(dino, class)
dog = read.csv("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
dog = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
# lapply keeps the names of the input
lapply(dog, class)
lapply(mydata, mean, na.rm = TRUE)
# always returns a vector
# vapply(data, function, an example of what will be returned )
vapply(dogs, class, "")
# always returns a vector
# vapply(data, function, an example of what will be returned )
vapply(dogs, class, "")
# always returns a vector
# vapply(data, function, an example of what will be returned )
vapply(dogs, class, " ")
# always returns a vector
# vapply(data, function, an example of what will be returned )
vapply(dogs, class, '')
dog = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
# always returns a vector
# vapply(data, function, an example of what will be returned )
vapply(dogs, class, '')
# always returns a vector
# vapply(data, function, an example of what will be returned )
dog = readRDS("/Users/g-mayer/adv_r/lab/lab_1/dogs_full.rds")
vapply(dogs, class, '')
vapply(dog, class, '')
x + y
# looping over multiple vectors at once
x = c(1,2,3)
y = 2:4
x + y
mapply(`+`, x, y)
vignette("pivot")
c(1,2,3) + 10
list(1,2,3,4)
list(1,2,3,4) + 10
curve(dnorm(x, 65, 3.5), 50, 80, xlab = "Height (in)",
ylab = "Probability Density")
rnorm(10, 65, 3.5)
dslide = function(x) {
ifelse(x > 1, 0,
ifelse(x > 0, dnorm(x) / dnorm(0), dunif(x, -1, 0))
)
}
curve(dslide, -2, 2, xlab = "Value", ylab = "Density (unscaled)")
dlisde(10)
dslide(10)
dslide(10)
dslide(10)
dslide(1)
dslide(2)
dslide(0.1)
dslide(0.01)
dslide(0.05)
?dslide
??dslide
dslide(0)
dslide(-1)
dslide(-1.1)
runif(1)
runif(1)
runif(0)
runif(0.1)
runif(0.11)
runif(0.4)
runif(2)
x = []
x
x = []
deslide(1)
dslide(1)
dslide(1.1)
# Your code goes here.
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y < dslide(x)) {
x
}
# Your code goes here.
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y < dslide(x)) {
x
}
x
y
list
x = list
x
x + 1
x = x+1
x
x=1
x
x = 1:10
x
x[1] = -
0
x
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i < n){
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y < dslide(x)) {
samp[i] = x
i = i + 1
}
}
}
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i < n){
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y < dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
rslide(10)
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y < dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
rslide(10)
rslide(20)
# Your code goes here.
# set.seed(33)
plot(density(rslide(1000000)))
# Your code goes here.
set.seed(33)
plot(density(rslide(1000000)))
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -2, 2)
y = runif(1, 0, 1)
if (y <= dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
# Your code goes here.
set.seed(33)
plot(density(rslide(1000000)))
y = runif(1, 1, 1)
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 1, 1)
if (y <= dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
# Your code goes here.
set.seed(33)
plot(density(rslide(1000000)))
y = runif(1,1)
y = runif(1,1,1)
y
y
y = runif(1,1,1)
y
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y <= dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
# Your code goes here.
set.seed(33)
plot(density(rslide(100000)))
plot(density(rslide(1000000)))
# Your code goes here.
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y < dslide(x)) {
x
}
# Your code goes here.
rslide = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y < dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
# Your code goes here.
set.seed(33)
plot(density(rslide(10000)))
plot(density(rslide(1000000)))
plot(density(rslide(10000000)))
x = runif(1, -1, 1)
y = runif(1, 0, 1)
x
y
dslide(x)
density(x)
# Your code goes here.
rs = rslide(1000000)
rslide_mean = mean(rs)
rslide_sd = sd(rs)
rslide_sd = sd(rs)
rslide_mean
rslide_sd
rslide_mean
avg_rs_rejected = replicate(10, rslide_rejected(10))
# Your code goes here.
rslide_rejected = function(n){
samp = 1:n
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y > dslide(x)) {
samp[i] = x
i = i + 1
}
}
samp
}
avg_rs_rejected = replicate(10, rslide_rejected(10))
avg_rs_rejected
# Your code goes here.
rslide_rejected = function(n){
samp = 0
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y < dslide(x)) {
i = i + 1
} else{
samp = samp + 1
}
}
samp
}
avg_rs_rejected = replicate(10, rslide_rejected(10))
avg_rs_rejected
avg_rs_rejected = mean(replicate(100, rslide_rejected(10000))) / 10000
avg_rs_rejected = mean(replicate(100, rslide_rejected(10000))) / 10000
avg_rs_rejected
message(avg_rs_rejected * 100)
message(avg_rs_rejected * 100 %)
message(avg_rs_rejected * 100 '%')
message(avg_rs_rejected * 100 + '%')
message(avg_rs_rejected * 100, '%')
message(avg_rs_rejected * 100, ' %')
trunc(avg_rs_rejected, 3)
trunc(avg_rs_rejected, 1)
round(avg_rs_rejected, 2)
round(avg_rs_rejected, 1)
avg_rs_rejected
reject_percent = message(round(avg_rs_rejected * 100, 3), '%')
reject_percent
message(round(avg_rs_rejected * 100, 3), '%')
message(round(avg_rs_rejected * 100, 2), '%')
avg_rs_rejected = mean(replicate(1000, rslide_rejected(10000))) / 10000
avg_rs_rejected = mean(replicate(1000, rslide_rejected(1000))) / 1000
message(round(avg_rs_rejected * 100, 2), '%')
avg_rs_rejected = mean(replicate(100, rslide_rejected(10000))) / 1000
avg_rs_rejected = mean(replicate(100, rslide_rejected(10000))) / 1000
message(round(avg_rs_rejected * 100, 2), '%')
message(round(avg_rs_rejected * 100, 2), '%')
message(round(avg_rs_rejected * 10, 2), '%')
# Your code goes here.
set.seed(33)
rslide_rejected = function(n){
samp = 0
i = 1
while (i <= n){
x = runif(1, -1, 1)
y = runif(1, 0, 1)
if (y < dslide(x)) {
i = i + 1
} else{
samp = samp + 1
}
}
samp
}
avg_rs_rejected = mean(replicate(100, rslide_rejected(10000))) / 10000
message(round(avg_rs_rejected * 100, 2), '%')
message(round(avg_rs_rejected * 100, 2), '%')
density(dslide(10000))
density(dslide())
list(1,1)
[1,2]
c(1,1)
list(1)
list(1,1,2,3,4,5)
x = c(1,2,3)
x = x+4
x
x[4] = 3
x
append(x, 4)
x
length(x)
1 in x
x = append(x, 4)
x
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
while(n < length(memo)){
new_fib = memo[n - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib
fib(40)
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
len_memo = length(memo)
message(len_memo)
while(n < len_memo){
new_fib = memo[ - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib(3)
fib(7)
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
len_memo = length(memo)
while(n < len_memo){
message(len_memo)
new_fib = memo[ - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib(5)
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
len_memo = length(memo)
while(n > len_memo){
message(len_memo)
new_fib = memo[ - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib(4)
fib(8)
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
while(n > length(memo)){
message(len_memo)
new_fib = memo[ - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib(4)
# Your code goes here.
make_fib = function() {
memo = c(1,1)
function(n) {
while(n > length(memo)){
message(length(memo))
new_fib = memo[ - 2] + memo[n - 1]
memo = append(memo, new_fib)
}
memo[n]
}
}
fib = make_fib()
fib(5)
